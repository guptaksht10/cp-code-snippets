<snippet>
	<content><![CDATA[
/*
	Author : Akshat Gupta ;)
*/

#include <bits/stdc++.h>
using namespace std;
const int MOD = 1e7 + 9;

#define debug(x) cerr << #x << " ";  _print(x);   cerr << endl;
#define debug2(x,y) cerr << #x << " ";  _print(x); cerr <<" "<<#y<< " ";  _print(y);  cerr << endl;
#define fastio() ios_base::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL)
#define INF 1e18
#define in(n) int n; cin >> n;
#define inll(n) ll n; cin >> n;
#define in2(x, y) int x, y; cin >> x >> y;
#define inll2(x, y) ll x, y; cin >> x >> y;
#define ins(s) string s; cin >> s;
#define vi vector<int>
#define vll vector<ll>
#define vpi vector<pair<int, int>>
#define vpl vector<pair<ll, ll>>
#define pi pair<int, int>
#define pll pair<ll, ll>
#define endl "\n"
#define pb push_back
#define ppb pop_back
#define mkp make_pair
#define ff first
#define ss second
#define PI 3.141592653589793238462
#define set_bits __builtin_popcountll
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define f(i,a,b) for(int i = a; i < b; i++)
#define int long long

typedef long long ll;
typedef unsigned long long ull;
typedef long double lld;
// void _print(ll t) { cerr << t; }
void _print(int t) { cerr << t; }
void _print(string t) { cerr << t; }
void _print(char t) { cerr << t; }
// void _print(lld t) { cerr << t; }
void _print(double t) { cerr << t; }
void _print(ull t) { cerr << t; }

template <class T, class V>
void _print(pair<T, V> pfx); template <class T>
void _print(vector<T> v1); template <class T>
void _print(deque<T> v1); template <class T>
void _print(set<T> v1); template <class T, class V>
void _print(unordered_set<T> v1); template <class T, class V>
void _print(map<T, V> v1); template <class T>
void _print(multiset<T> v1); template <class T, class V>
void _print(pair<T, V> pfx) {cerr << "{"; _print(pfx.ff); cerr << ","; _print(pfx.ss); cerr << "}";}
template <class T>void _print(vector<T> v1) {cerr << "[ "; for (T i : v1) {_print(i); cerr << " ";} cerr << "]";}
template <class T>void _print(deque<T> v1) {cerr << "[ "; for (T i : v1) {_print(i); cerr << " ";} cerr << "]";}
template <class T>void _print(set<T> v1) {cerr << "[ "; for (T i : v1) {_print(i); cerr << " ";} cerr << "]";}
template <class T>void _print(unordered_set<T> v1) {cerr << "[ "; for (T i : v1) {_print(i); cerr << " ";} cerr << "]";}
template <class T>void _print(multiset<T> v1) {cerr << "[ "; for (T i : v1) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V>void _print(map<T, V> v1) {cerr << "[ "; for (auto i : v1) {_print(i); cerr << " ";} cerr << "]";}

void presolve();
void solve();

int32_t main() {

	presolve();

	int testcase = 1;
	cin>>testcase;

	while (testcase--) {

		solve();

	}

	cerr << "//=====================================================================================================//" << endl;
	cerr << "Time Taken : " << (float)clock() / CLOCKS_PER_SEC << "secs";
}

void presolve() {

	return;
}

void solve() {

	return;
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>hackcp</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
