<snippet>
	<content><![CDATA[
template<typename T>
class UGraph {
public:
	map<T, list<T>> mp;

	void addEdge(T x, T y) {
		mp[x].push_back(y);
		mp[y].push_back(x);
	}

	void DFS(T src) {
		map<T, bool> visited;
		for (auto x : mp) {
			visited[x.first] = 0;
		}

		int connected_components = 1;

		dfs_helper(src, visited);
		for (auto x : mp) {
			if (visited[x.first] == 0) {
				dfs_helper(x.first, visited);
				connected_components++;
			}
		}
		cout << endl;
	}

	void dfs_helper(T x, map<int, bool> &visited) {
		visited[x] = 1;
		cout << x << ' ';

		for (auto nbr : mp[x]) {
			if (visited[nbr] == 0) {
				dfs_helper(nbr, visited);
			}
		}
	}

	void BFS(T src) {
		map<T, bool > visited;
		for (auto x : mp) {
			visited[x.first] = 0;
		}

		int connected_components = 1;
		bfs_helper(src, visited);
		for (auto x : mp) {
			if (visited[x.first] == 0) {
				bfs_helper(x.first, visited);
				connected_components ++;
			}
		}

		cout << endl;
	}

	void bfs_helper(T x, map<T, bool> &visited) {
		queue<T> q;
		q.push(x);
		visited[x] = 1;
		while (!q.empty()) {
			T node = q.front();
			q.pop();
			cout << node << ' ';
			for (auto nbr : mp[node]) {
				if (visited[nbr] == 0) {
					q.push(nbr);
					visited[nbr] = 1;
				}
			}
		}
	}

	bool detect_cycleDFS() {
		map<T, bool> visited;
		for (auto x : mp) {
			visited[x.first] = 0;
		}

		for (auto x : mp) {
			if (visited[x.first] == 0) {
				int ans = detect_cycleDFS_helper(x.first, visited, -1);
				if (ans == 1) {
					return true;
				}
			}
		}

		return false;
	}

	bool detect_cycleDFS_helper(T node, map<T, bool> &visited, T parent) {
		visited[node] = 1;
		for (auto nbr : mp[node]) {
			if (visited[nbr] == 0) {
				int ans = detect_cycleDFS_helper(nbr, visited, node);
				if (ans == 1) {
					return true;
				}
			} else if (nbr != parent) {
				return true;
			}
		}

		return false;
	}

	bool detect_cycleBFS(T src) {
		map<T, int> distance;
		for (auto x : mp) {
			distance[x.first] = -1;
		}

		queue<T> q;
		q.push(src);
		distance[src] = 0;
		while (!q.empty()) {
			T node = q.front();
			q.pop();
			for (auto nbr : mp[node]) {
				if (distance[nbr] == -1) {
					distance[nbr] = distance[node] + 1;
					q.push(nbr);
				} else if (distance[nbr] <= distance[node]) {
					return 1;
				}
			}
		}

		return 0;
	}

	void ssspa_bfs(T src) {
		map<T, int> distance;

		for (auto x : mp) {
			distance[x.first] = -1;
		}

		queue<T> q;
		q.push(src);
		distance[src] = 0;
		while (!q.empty()) {
			T node = q.front();
			q.pop();
			for (auto nbr : mp[node]) {
				if (distance[nbr] == -1) {
					distance[nbr] = distance[node] + 1;
					q.push(nbr);
				}
			}
		}

		for (auto x : distance) {
			cout << x.first << ' ' << x.second << endl;
		}

		cout << endl;
	}

	void shortest_cycle_bfs(int node, int ans) {
		
	}

	bool bipartite_checkerDFS(T scr) {
		map<T, int> visited;
		for (auto x : mp) {
			visited[x.first] = 0;
		}

		return dfs_bipartite_helper(scr, -1, visited, 1);
	}

	bool dfs_bipartite_helper(T node, T parent, map<T, int> &visited, int color) {
		visited[node] = color;
		for (auto nbr : mp[node]) {
			if (visited[nbr] == 0) {
				int check = dfs_bipartite_helper(nbr, node, visited, 3 - color);
				if (check == 0) {
					return false;
				}
			} else if (color == visited[nbr]) {
				return false;
			}
		}

		return true;
	}

};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>Ug_UndirectedGraph</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
